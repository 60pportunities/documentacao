name: build_deploy_60pportunities

on:
  push:
    branches:
      - main  # ou master, dependendo do seu branch principal
    tags:
      - '*'   # Executa também quando tags são criadas
      
permissions:
  contents: write
  pull-requests: write
  
jobs:
  build-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout do repositório
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necessário para o changelog gerar o histórico completo
        lfs: false       # Habilita o Git LFS

    # 2. Instalação do Git LFS
    - name: Install Git LFS
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs
        git lfs install --skip-repo  # Não configura o repositório atual
        
    # 3. Verificação da instalação do Git LFS
    - name: Verify Git LFS installation
      run: |
        git lfs version
        if ! git lfs version; then
          echo "::error::Git LFS not properly installed!"
        fi
    # 4. Checkout do repositório
    - name: Checkout repository with LFS
      uses: actions/checkout@v4
      with:
        lfs: false
        clean: false  # Mantém os arquivos já baixados
        
    # 5. Setup do Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.*'

    # 6. Checkout do repositório
    - name: Remove LFS hooks temporarily
      run: |
           # Remove os hooks do LFS se existirem
           if [ -f .git/hooks/post-checkout ]; then
               rm .git/hooks/post-checkout
           fi
           
    # 7. Instalação de pacotes Python básicos
    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mkdocs mike

    # 8. Instalação de requirements.txt se existir
    - name: Install requirements
      run: |
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt not found, skipping..."
        fi
        
    # 9. Configurar token de acesso para git-committers
    - name: Setup environment
      run: |
        echo "MKDOCS_GIT_COMMITTERS_APIKEY=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
        rm .git/hooks/pre-push
      shell: bash
      
    # 10. Get latest tag
    - name: Get latest tag
      id: get-tag
      run: |
        # Obtém a última tag por data de criação
        #TAG=$(git describe --tags --abbrev=0)
        TAG=$(git tag -l --sort=v:refname | tail -n 1)
        echo "Latest tag: $TAG"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        
    # 11. Geração do Changelog
    - name: Generate Changelog
      uses: saadmk11/changelog-ci@v1.1.2
      with:
        changelog_filename: CHANGELOG.md
        release_version: ${{ steps.get-tag.outputs.tag || '0.0.0' }}  # Usa a tag ou um valor padrão
        committer_username: 'HVasconcellos'
        committer_email: 'horacio.vasconcellos@gmail.com'
        config_file: .github/changelogConfig.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # 12. Deploy com Mike para GitHub Pages
    - name: Deploy documentation
      run: |
        # Configura o git
        git config --global user.name "HVasconcellos"
        git config --global user.email "horacio.vasconcellos@gmail.com"
        #git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

        VERSION=${{ steps.get-tag.outputs.tag }}
        echo "Versão deploy mike : ${VERSION}"
        mike deploy --update-aliases "${VERSION}" latest
        mike set-default --push latest --allow-empty
        # Usa Mike para fazer o deploy
        #mike deploy --push --update-aliases ${{ steps.get-tag.outputs.tag }} latest
        #mike set-default --push latest --allow-empty
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
